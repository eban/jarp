<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="diary.xsl" type="text/xsl"?>
<rdf:RDF xmlns="http://purl.org/rss/1.0/"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:image="http://purl.org/rss/1.0/modules/image/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel rdf:about="http://jarp.does.notwork.org/diary/index.rdf">
    <title>Just another Ruby porter,</title>
    <link>http://jarp.does.notwork.org/diary/</link>
    <description>たぶんRubyに関する日誌</description>
    <image rdf:resource="http://jarp.does.notwork.org/diary/JARP.png"/>
    <items>
      <rdf:Seq>
        <rdf:li resource="http://jarp.does.notwork.org/201702151"/>
        <rdf:li resource="http://jarp.does.notwork.org/201702111"/>
        <rdf:li resource="http://jarp.does.notwork.org/201701041"/>
        <rdf:li resource="http://jarp.does.notwork.org/201612281"/>
        <rdf:li resource="http://jarp.does.notwork.org/201612261"/>
      </rdf:Seq>
    </items>
    <dc:creator>eban</dc:creator>
    <dc:language>ja</dc:language>
  </channel>
  <image rdf:about="http://jarp.does.notwork.org/diary/JARP.png">
    <title>Just another Ruby porter,</title>
    <url>http://jarp.does.notwork.org/diary/JARP.png</url>
    <link>http://jarp.does.notwork.org/diary/</link>
  </image>
  <item rdf:about="http://jarp.does.notwork.org/201702151">
    <title>第27回シェル芸勉強会を #Vimシェル芸 で</title>
    <link>http://jarp.does.notwork.org/201702151</link>
    <description>
Q1 GNU sedと同じ。
% echo abcdefghijklmn | ex /dev/stdin +'s/\(.\)\(.\)/\1\u\2/g|p|q!'
aBcDeFgHiJkLmN
% echo abcdefghijklmn | vim...</description>
    <content:encoded><![CDATA[<p>
Q1 GNU sedと同じ。
</p>
<pre>
% echo abcdefghijklmn | ex /dev/stdin +'s/\(.\)\(.\)/\1\u\2/g|p|q!'
aBcDeFgHiJkLmN
% echo abcdefghijklmn | vim -es /dev/stdin +'s/../\u&amp;/g|p|q!'
AbCdEfGhIjKlMn
</pre>
<p>
文字単位の移動も簡単にできるので、ブレース展開との合わせ技で。
</p>
<pre>
% echo abcdefghijklmn | vim -es /dev/stdin +'norm l~'{,,,,,,} +'p|q!'
aBcDeFgHiJkLmN
% echo abcdefghijklmn | vim -es /dev/stdin +'norm ~l'{,,,,,,} +'p|q!'
AbCdEfGhIjKlMn
</pre>
<p>
Q2 FizzBuzz
</p>
<pre>
% vim -es +$'norm 33o\nFizz\n\e' +$'let @a=&quot;ABuzz\e5k&quot;|norm 20@a' +'%s/^$/\=line(&quot;.&quot;)/|%p|q!'
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
&lt;以下略&gt;
</pre>
<p>
normだとなぜかqでのマクロが保存できないので苦肉の策。直接レジスタに入れてる。<br>
行って帰って間を埋める。生のESC等は扱い辛いので$''で表現。
</p>
<p>
Q3 3move7
</p>
<pre>
% seq 1 10 | vim -es /dev/stdin +'3m7|%p|q!'
1
2
4
5
6
7
3
8
9
10
</pre>
<p>
実にvim向きの問題。
</p>
<p>
Q4 aho.cc
</p>
<pre>
% cat aho.cc | vim -es /dev/stdin +'/main/,/^}/m$|%p|q!' | g++ -xc++ -; ./a.out
aho
</pre>
<p>
これもmove一発。Q3と同じ。
</p>
<p>
Q5 偶奇入れ替え
</p>
<pre>
% seq 10 | vim -es /dev/stdin +1 +'m+1|+1'{,,,,} +'%p|q!'
2
1
4
3
6
5
8
7
10
9
</pre>
<p>
奇数行でm+1を実行すると現在行と次行が入れ替わるので、さらに次行に移動(+1)し、<br>
ブレース展開で5回繰り返し。
</p>
<p>
Q6 階段状
</p>
<pre>
% echo 1 | vim -es /dev/stdin +'for i in range(10)|p|s/./&amp;&amp;/|endfor|q!'
1
11
111
1111
11111
111111
1111111
11111111
111111111
1111111111
</pre>
<p>
p|s/./&amp;&amp;/を10回繰り返し。ブレース展開技でもいけそうだが、<br>
vimのわけのわからない制限により10個までしか指定できない。
</p>
<pre>
% echo 1 | vim -es /dev/stdin +'p|s/./&amp;&amp;/'{1..10} +'q!'
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 22:32:42)
Too many &quot;+command&quot;, &quot;-c command&quot; or &quot;--cmd command&quot; arguments
More info with: &quot;vim -h&quot;
</pre>
<p>
Q7 縛り1 使うコマンドはseq、cp、vimだけ
</p>
<pre>
% rm a*
% vim -es +'wq a'
% seq 10 | vim -es /dev/stdin +'g/^/exe &quot;!cp a a&quot; . getline(&quot;.&quot;)' +'q!'
% ls
a  a1  a10  a2  a3  a4  a5  a6  a7  a8  a9
</pre>
<p>
Q7 縛り2 ワンライナー中で数字を使わない
</p>
<p>
実はgetline(&quot;.&quot;)をline(&quot;.&quot;)に変更すれば行番号が使えるので、<br>
なんでもいいので10行作ればいい。
</p>
<pre>
% rm a*
% vim -es +'wq a|norm Yppppppppp' +'g/^/exe &quot;!cp a a&quot; . line(&quot;.&quot;)' +'q!'
% ls
a  a1  a10  a2  a3  a4  a5  a6  a7  a8  a9
</pre>
<p>
ついでにseq 10相当をvimで。
</p>
<pre>
% vim -es +'norm Yppppppppp' +'%#|q!'
      1
      2
      3
      4
      5
      6
      7
      8
      9
     10
</pre>
<p>
微妙に違うのでちょっとがんばってみた。
</p>
<pre>
% vim -es +'norm Yppppppppp' +'%s/^/\=line(&quot;.&quot;)' +'%p|q!'
1
2
3
4
5
6
7
8
9
10
</pre>
<p>
Q8 山
</p>
<pre>
% echo 1 | vim -es /dev/stdin +'t.|s/./&amp;&amp;'{,,,} +'g/^/t5' +'%p|q!'
1
11
111
1111
11111
11111
1111
111
11
1
</pre>
<p>
tはcopyの別名。cはchangeなのでcopyは短縮形でもcoと書かないといけないが、<br>
1文字で書きたい人のためにtは用意されてるとか？
</p>
<a href="https://blog.ueda.asia/?p=9283">https://blog.ueda.asia/?p=9283</a>
]]></content:encoded>

    <dc:creator>eban</dc:creator>
    <dc:date>2017-02-15T21:39:00.409972+09:00</dc:date>
  </item>
  <item rdf:about="http://jarp.does.notwork.org/201702111">
    <title>第27回シェル芸勉強会</title>
    <link>http://jarp.does.notwork.org/201702111</link>
    <description>
今回はリモート参戦。
sedのtがどーのこーのとあったので、Q6をtを使って解く。
bはgotoでtはsでの置き換えが成功したら飛ぶというだけなので、
まあ、そんな難しい話でもない。
sの成功フラグはtやTで飛ぶか次のサイクルへ移行したらOFFになる...</description>
    <content:encoded><![CDATA[<p>
今回はリモート参戦。<br>
sedのtがどーのこーのとあったので、Q6をtを使って解く。
</p>
<p>
bはgotoでtはsでの置き換えが成功したら飛ぶというだけなので、<br>
まあ、そんな難しい話でもない。<br>
sの成功フラグはtやTで飛ぶか次のサイクルへ移行したらOFFになる。<br>
</p>
<p>
まずはbを使った場合。
</p>
<pre>
% echo 1 | sed ':a;p;s/./&amp;&amp;/;/.\{10\}/!b a'
1
11
111
1111
11111
111111
1111111
11111111
111111111
1111111111
</pre>
<p>
9回繰り返すだけだ。10回じゃないのはデフォルトの出力が最後にあるため。<br>
1と限定できればs/^/1/と短く書けるが、<br>
echo aとか任意の文字でもいいようにしている。
</p>
<p>
これを踏まえて、tを使うようにする。<br>
sのパターンで10個以上になったらmatchしないようにしてやればいいだけ。
</p>
<pre>
% echo 1 | sed -nr ':a;p;s/^(.){1,9}$/&amp;\1/;t a'
1
11
111
1111
11111
111111
1111111
11111111
111111111
1111111111
</pre>
<p>
\があると見辛いので-rを使った。<br>
/^(.){1,9}$/とすることで1から9文字のときだけmatchする。<br>
</p>
<p>
9回繰り返すという意味では例のブレース展開技も使える。
</p>
<pre>
% echo 1 | sed -e'p;s/./&amp;&amp;/;#'{1..9}
1
11
111
1111
11111
111111
1111111
11111111
111111111
1111111111
</pre>
<a href="https://blog.ueda.asia/?p=9309">https://blog.ueda.asia/?p=9309</a>
]]></content:encoded>

    <dc:creator>eban</dc:creator>
    <dc:date>2017-02-12T01:25:44.893339+09:00</dc:date>
  </item>
  <item rdf:about="http://jarp.does.notwork.org/201701041">
    <title>GNU sed 4.3 released</title>
    <link>http://jarp.does.notwork.org/201701041</link>
    <description>
ああ、とうとう名無しのラベルは受け付けなくなってしまった。
バグ認定だ。
** Bug fixes
  sed no longer accepts a &amp;quot;:&amp;quot; command without a label; before, i...</description>
    <content:encoded><![CDATA[<p>
ああ、とうとう名無しのラベルは受け付けなくなってしまった。<br>
バグ認定だ。
</p>
<pre>
** Bug fixes
  sed no longer accepts a &quot;:&quot; command without a label; before, it would
  treat that as defining a label whose name is empty, and subsequent
  label-free &quot;t&quot; and &quot;b&quot; commands would use that label. Now, sed emits
  a diagnostic and fails for that invalid construct.
</pre>
<p>
エラーになってしまう。
</p>
<pre>
% echo | sed :
% sed --version | head -n1
sed (GNU sed) 4.2.2
% echo | ~/local/bin/sed :
/home/eban/local/bin/sed: -e expression #1, char 1: &quot;:&quot; lacks a label
% ~/local/bin/sed --version | head -n1
/home/eban/local/bin/sed (GNU sed) 4.3
</pre>
<p>
それはそれとして、正規表現マッチが10倍速くなるってまじか。
</p>
<pre>
** Improvements
  sed's regular expression matching is now typically 10x faster
</pre>
<a href="http://lists.gnu.org/archive/html/sed-devel/2016-12/msg00046.html">http://lists.gnu.org/archive/html/sed-devel/2016-12/msg00046.html</a>
]]></content:encoded>

    <dc:creator>eban</dc:creator>
    <dc:date>2017-02-12T01:25:00.338392+09:00</dc:date>
  </item>
  <item rdf:about="http://jarp.does.notwork.org/201612281">
    <title>忘年会</title>
    <link>http://jarp.does.notwork.org/201612281</link>
    <description>
HUBには芋しかない。あと寒い。
</description>
    <content:encoded><![CDATA[<p>
HUBには芋しかない。あと寒い。
</p>
]]></content:encoded>

    <dc:creator>eban</dc:creator>
    <dc:date>2016-12-29T00:41:15.744087+09:00</dc:date>
  </item>
  <item rdf:about="http://jarp.does.notwork.org/201612261">
    <title>第26回シェル芸勉強会 Q3 #シェル芸</title>
    <link>http://jarp.does.notwork.org/201612261</link>
    <description>
とりあえずQ3でunzipしない別解を思い付いたので。
% cp 20141019OSC_LT.pptx img.zip
% zip -d img.zip -x\*.{gif,jpg,png} \*
% unzip -l img.zip
Archiv...</description>
    <content:encoded><![CDATA[<p>
とりあえずQ3でunzipしない別解を思い付いたので。<br>
</p>
<pre>
% cp 20141019OSC_LT.pptx img.zip
% zip -d img.zip -x\*.{gif,jpg,png} \*
% unzip -l img.zip
Archive:  img.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    99260  1980-01-01 00:00   ppt/media/image2.gif
    13744  1980-01-01 00:00   ppt/media/image3.png
   111613  1980-01-01 00:00   ppt/media/image10.jpg
   379635  1980-01-01 00:00   ppt/media/image9.jpg
   159302  1980-01-01 00:00   ppt/media/image7.png
   426687  1980-01-01 00:00   ppt/media/image1.png
   186174  1980-01-01 00:00   ppt/media/image4.png
    95304  1980-01-01 00:00   ppt/media/image8.jpg
    70496  1980-01-01 00:00   ppt/media/image5.png
    67739  1980-01-01 00:00   ppt/media/image6.gif
---------                     -------
  1609954                     10 files
</pre>
<p>
pptxはzipファイルなんだから、zipコマンドで画像以外のファイルを消してしまえばいいわけだ。<br>
実はthumbnail.jpegという画像ファイルもあるが、これはスライドではなくサムネイルなので除外した。
</p>
<a href="https://blog.ueda.asia/?p=9226">https://blog.ueda.asia/?p=9226</a>
]]></content:encoded>

    <dc:creator>eban</dc:creator>
    <dc:date>2016-12-26T22:45:22.204806+09:00</dc:date>
  </item>
</rdf:RDF>
