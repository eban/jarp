Index: ext/extmk.rb.in
===================================================================
RCS file: /src/ruby/ext/extmk.rb.in,v
retrieving revision 1.82
diff -u -1 -p -r1.82 extmk.rb.in
--- ext/extmk.rb.in	21 Aug 2002 08:30:07 -0000	1.82
+++ ext/extmk.rb.in	2 Sep 2002 15:21:04 -0000
@@ -3,4 +3,6 @@
 
-$".push 'mkmf.rb' # "
-ORIG_LIBPATH = ENV['LIB']
+$force_static = nil
+$install = nil
+$destdir = nil
+$clean = nil
 
@@ -24,16 +26,13 @@ end
 
-SRC_EXT = ["c", "cc", "m", "cxx", "cpp", "C"]
 $extlist = []
 
-$libdir = "@libdir@"
+# don't require twice for rbconfig.rb
+$:.replace [".."]
+require 'rbconfig'
 
-# get absolute path
-$top_srcdir = File.expand_path("@top_srcdir@")
+$top_srcdir = Config::CONFIG["srcdir"]
 
-# get absolute path
-$topdir = File.expand_path("..")
-
-$:.replace [$topdir, $top_srcdir, $top_srcdir+"/lib", "."]
+$:.push($top_srcdir, $top_srcdir+"/lib", ".")
 
-require 'rbconfig.rb'
+require 'mkmf'
 require 'find'
@@ -42,40 +41,3 @@ require 'shellwords'
 
-def rm_f(*files)
-  targets = []
-  for file in files
-    targets.concat Dir[file]
-  end
-  if not targets.empty?
-    File::chmod(0777, *targets)
-    File::unlink(*targets)
-  end
-end
-
-def older(file1, file2)
-  if !File.exist?(file1) then
-    return true
-  end
-  if !File.exist?(file2) then
-    return false
-  end
-  if File.mtime(file1) < File.mtime(file2)
-    return true
-  end
-  return false
-end
-
-CFLAGS = "@CFLAGS@"
-if RUBY_PLATFORM == "m68k-human"
-  CFLAGS.gsub!(/-c..-stack=[0-9]+ */, '')
-end
-if /mswin32/ =~ RUBY_PLATFORM
-  OUTFLAG = '-Fe'
-elsif /bccwin32/ =~ RUBY_PLATFORM
-  OUTFLAG = '-o'
-else
-  OUTFLAG = '-o '
-end
-LINK = "@CC@ #{OUTFLAG}conftest -I#$topdir -I#$top_srcdir #{CFLAGS} @LDFLAGS@ %s %s %s conftest.c %s %s @LIBS@"
-CPP = "@CPP@ @CPPFLAGS@ -I#$topdir -I#$top_srcdir #{CFLAGS} %s %s %s conftest.c"
-
+$topdir = File.expand_path("..")
 $log = nil
@@ -95,287 +57,10 @@ def xsystem command
   $stdout.flush
-  r = system(command)
+  system(command)
+ensure
   $stderr.reopen($orgerr)
   $stdout.reopen($orgout)
-  return r
-end
-
-def try_link0(src, opt="")
-  cfile = open("conftest.c", "w")
-  cfile.print src
-  cfile.close
-  ldflags = $LDFLAGS
-  if /mswin32|bccwin32/ =~ RUBY_PLATFORM and !$LIBPATH.empty?
-    ENV['LIB'] = ($LIBPATH + [ORIG_LIBPATH]).compact.join(';')
-  else
-    ldflags = ldflags.dup
-    $LIBPATH.each {|d| ldflags << " -L" + d}
-  end
-  begin
-    xsystem(Config::expand(format(LINK, $CFLAGS, $CPPFLAGS, ldflags, opt, $LOCAL_LIBS)))
-  ensure
-    ENV['LIB'] = ORIG_LIBPATH if /mswin32|bccwin32/ =~ RUBY_PLATFORM
-  end
-end
-
-def try_link(src, opt="")
-  begin
-    try_link0(src, opt)
-  ensure
-    rm_f "conftest*"
-    if /bccwin32/ =~ RUBY_PLATFORM
-      rm_f "c0x32*"
-    end
-  end
-end
-
-def try_cpp(src, opt="")
-  cfile = open("conftest.c", "w")
-  cfile.print src
-  cfile.close
-  begin
-    xsystem(Config::expand(format(CPP, $CFLAGS, $CPPFLAGS, opt)))
-  ensure
-    rm_f "conftest*"
-  end
-end
-
-def egrep_cpp(pat, src, opt="")
-  cfile = open("conftest.c", "w")
-  cfile.print src
-  cfile.close
-  begin
-    xsystem(Config::expand(format(CPP, $CFLAGS, $CPPFLAGS, opt))+"|egrep #{pat}")
-  ensure
-    rm_f "conftest*"
-  end
-end
-
-def try_run(src, opt="")
-  begin
-    if try_link0(src, opt)
-      if xsystem("./conftest")
-	true
-      else
-	false
-      end
-    else
-      nil
-    end
-  ensure
-    rm_f "conftest*"
-  end
-end
-
-def install_rb(mfile, srcdir = nil)
-  libdir = "lib"
-  libdir = File.join(srcdir, libdir) if srcdir
-  path = []
-  dir = []
-  if File.directory? libdir
-    Find.find(libdir) do |f|
-      next unless /\.rb$/ =~ f
-      f = f[libdir.length+1..-1]
-      path.push f
-      dir |= [File.dirname(f)]
-    end
-  end
-  for f in dir
-    if f == "."
-      mfile.print "\t@$(RUBY) -r ftools -e 'File::makedirs(*ARGV)' $(DESTDIR)$(pkglibdir)$(target_prefix)\n"
-    else
-      mfile.printf "\t@$(RUBY) -r ftools -e 'File::makedirs(*ARGV)' $(DESTDIR)$(pkglibdir)$(target_prefix)/%s\n", f
-    end
-  end
-  for f in path
-    mfile.printf "\t@$(RUBY) -r ftools -e 'File::install(ARGV[0], ARGV[1], 0644, true)' $(srcdir)/lib/%s $(DESTDIR)$(pkglibdir)$(target_prefix)/%s\n", f, f
-  end
-end
-
-def append_library(libs, lib)
-  if /mswin32|bccwin32/ =~ RUBY_PLATFORM
-    lib + ".lib " + libs
-  else
-    "-l" + lib + " " + libs
-  end
 end
 
-def have_library(lib, func="main")
-  if func && func != ""
-    libs = append_library($libs, lib)
-    if /mswin32|bccwin32|mingw/ =~ RUBY_PLATFORM
-      return true if lib == 'm'
-      r = try_link(<<"SRC", libs)
-#include <windows.h>
-#include <winsock.h>
-int main() { return 0; }
-int t() { #{func}(); return 0; }
-SRC
-      unless r
-        r = try_link(<<"SRC", libs)
-#include <windows.h>
-#include <winsock.h>
-int main() { return 0; }
-int t() { void ((*p)()); p = (void ((*)()))#{func}; return 0; }
-SRC
-      end
-    else
-      r = try_link(<<"SRC", libs)
-int main() { return 0; }
-int t() { #{func}(); return 0; }
-SRC
-    end
-    unless r
-      return false
-    end
-  else
-    libs = append_library($libs, lib)
-  end
-
-  $libs = libs
-  return true
-end
-
-def find_library(lib, func, *paths)
-  libpath = $LIBPATH
-  libs = append_library($libs, lib)
-  until try_link(<<"SRC", libs)
-int main() { return 0; }
-int t() { #{func}(); return 0; }
-SRC
-    if paths.size == 0
-      $LIBPATH = libpath
-      return false
-    end
-    $LIBPATH = libpath | [paths.shift]
-  end
-  $libs = libs
-  return true
-end
-
-def have_func(func, header=nil)
-  libs = $libs
-  src = 
-    if /mswin32|bccwin32|mingw/ =~ RUBY_PLATFORM
-      r = <<"SRC"
-#include <windows.h>
-#include <winsock.h>
-SRC
-    else
-      ""
-    end
-  unless header.nil?
-  src << <<"SRC"
-#include <#{header}>
-SRC
-  end
-  r = try_link(src + <<"SRC", libs)
-int main() { return 0; }
-int t() { #{func}(); return 0; }
-SRC
-  unless r
-    r = try_link(src + <<"SRC", libs)
-int main() { return 0; }
-int t() { void ((*p)()); p = (void ((*)()))#{func}; return 0; }
-SRC
-  end
-  unless r
-    return false
-  end
-  $defs.push(format("-DHAVE_%s", func.upcase))
-  return true
-end
-
-def have_header(header)
-  unless try_cpp(<<"SRC")
-#include <#{header}>
-SRC
-    return false
-  end
-  $defs.push(format("-DHAVE_%s", header.tr("a-z./\055", "A-Z___")))
-  return true
-end
-
-def find_executable(bin, path = nil)
-  if path.nil?
-    path = ENV['PATH'].split(Config::CONFIG['PATH_SEPARATOR'])
-  else
-    path = path.split(Config::CONFIG['PATH_SEPARATOR'])
-  end
- 
-  bin += "@EXEEXT@"
-  for dir in path
-    file = File.join(dir, bin)
-    if FileTest.executable?(file)
-      return file
-    else
-      next
-    end
-  end
-  return nil
-end
-
-def arg_config(config, default=nil)
-  unless defined? $configure_args
-    $configure_args = {}
-    args = "@configure_args@"
-    if /mswin32|bccwin32|mingw/ =~ RUBY_PLATFORM and ENV["CONFIGURE_ARGS"]
-      args << " " << ENV["CONFIGURE_ARGS"]
-    end
-    for arg in Shellwords::shellwords(args)
-      next unless /^--/ =~ arg
-      arg, val = arg.split('=', 2)
-      $configure_args[arg] = val || true
-    end
-  end
-  $configure_args.fetch(config, default)
-end
-
-def with_config(config, default=nil)
-  unless /^--with-/ =~ config
-    config = '--with-' + config
-  end
-  arg_config(config, default)
-end
-
-def enable_config(config, default=nil)
-  if arg_config("--enable-"+config)
-    true
-  elsif arg_config("--disable-"+config)
-    false
-  else
-    default
-  end
-end
-
-def create_header()
-  if $defs.length > 0
-    hfile = open("extconf.h", "w")
-    for line in $defs
-      line =~ /^-D(.*)/
-      hfile.printf "#define %s 1\n", $1
-    end
-    hfile.close
-  end
-end
-
-def dir_config(target, idefault=nil, ldefault=nil)
-  if dir = with_config(target + "-dir", (idefault unless ldefault))
-    idefault = dir + "/include"
-    ldefault = dir + "/lib"
-  end
-
-  idir = with_config(target + "-include", idefault)
-  ldir = with_config(target + "-lib", ldefault)
-
-  if idir
-    idircflag = "-I" + idir
-    $CPPFLAGS += " " + idircflag unless $CPPFLAGS.split.include?(idircflag)
-  end
-
-  if ldir
-    $LIBPATH << ldir unless $LIBPATH.include?(ldir)
-  end
-
-  [idir, ldir]
-end
+$LINK = "#{CONFIG['CC']} #{OUTFLAG}conftest -I#$topdir -I#$top_srcdir #{CFLAGS} %s %s #{CONFIG['LDFLAGS']} %s conftest.c %s %s #{CONFIG['LIBS']}"
+$CPP = "#{CONFIG['CPP']} #{CONFIG['CPPFLAGS']} %s -I#$topdir -I#$top_srcdir #{CFLAGS} %s %s conftest.c"
 
@@ -390,3 +75,3 @@ def create_makefile(target)
   rm_f "conftest*"
-  if "@DLEXT@" == $OBJEXT
+  if CONFIG["DLEXT"] == $OBJEXT
     libs = $libs.split
@@ -398,6 +83,6 @@ def create_makefile(target)
 
-  $DLDFLAGS = '@DLDFLAGS@'
+  $DLDFLAGS = CONFIG["DLDFLAGS"].dup
 
-  if $configure_args['--enable-shared'] or "@LIBRUBY@" != "@LIBRUBY_A@"
-    $libs = "@LIBRUBYARG@ " + $libs
+  if $configure_args['--enable-shared'] or CONFIG["LIBRUBY"] != CONFIG["LIBRUBY_A"]
+    $libs = CONFIG["LIBRUBYARG"] + " " + $libs
     $LIBPATH.unshift $topdir
@@ -434,3 +119,3 @@ def create_makefile(target)
   mfile.binmode if /mingw/ =~ RUBY_PLATFORM
-  mfile.printf <<EOL, if $static then "" else "@CCDLFLAGS@" end, $defs.join(" ")
+  mfile.printf <<EOL, if $static then "" else CONFIG["CCDLFLAGS"] end, $defs.join(" ")
 SHELL = /bin/sh
@@ -445,3 +130,3 @@ hdrdir = #{$top_srcdir}
 
-CC = @CC@
+CC = #{CONFIG['CC']}
 
@@ -452,6 +137,6 @@ if /bccwin32/ =~ RUBY_PLATFORM
   "DLDFLAGS = #$LDFLAGS -L" + '"$(topdir:/=\\)"' + "\n" +
-  "LDSHARED = @LDSHARED@\n"
+  "LDSHARED = #{CONFIG['LDSHARED']}\n"
 else
   "DLDFLAGS = #$DLDFLAGS #$LDFLAGS\n" +
-  "LDSHARED = @LDSHARED@ #{defflag}\n"
+  "LDSHARED = #{CONFIG['LDSHARED']} #{defflag}\n"
 end
@@ -461,3 +146,3 @@ EOL
 
-  mfile.puts ".SUFFIXES: .@OBJEXT@" unless "@OBJEXT@" == "o"
+  mfile.puts ".SUFFIXES: .#{CONFIG['OBJEXT']}" unless #{CONFIG['OBJEXT']} == "o"
 
@@ -465,13 +150,13 @@ EOL
 
-RUBY_INSTALL_NAME = @RUBY_INSTALL_NAME@
-RUBY_SO_NAME = @RUBY_SO_NAME@
+RUBY_INSTALL_NAME = #{CONFIG['RUBY_INSTALL_NAME']}
+RUBY_SO_NAME = #{CONFIG['RUBY_SO_NAME']}
 
-prefix = @prefix@
-exec_prefix = @exec_prefix@
-libdir = @libdir@
-#pkglibdir = $(libdir)/$(RUBY_INSTALL_NAME)/@MAJOR@.@MINOR@
-pkglibdir = $(libdir)/ruby/@MAJOR@.@MINOR@
-archdir = $(pkglibdir)/@arch@
+prefix = #{CONFIG['prefix']}
+exec_prefix = #{CONFIG['exec_prefix']}
+libdir = #{CONFIG['libdir']}
+#pkglibdir = $(libdir)/$(RUBY_INSTALL_NAME)/#{CONFIG['MAJOR']}.#{CONFIG['MINOR']}
+pkglibdir = $(libdir)/ruby/#{CONFIG['MAJOR']}.#{CONFIG['MINOR']}
+archdir = $(pkglibdir)/#{CONFIG['arch']}
 target_prefix = #{target_prefix}
-@SET_MAKE@
+#{CONFIG['SET_MAKE']}
 
@@ -503,7 +188,7 @@ target_prefix = #{target_prefix}
   if /bccwin32/ =~ RUBY_PLATFORM
-    ruby_interpreter = '$(topdir:/=\)/miniruby@EXEEXT@'
+    ruby_interpreter = '$(topdir:/=\)/miniruby' + CONFIG['EXEEXT']
   else
-    ruby_interpreter = "$(topdir)/miniruby@EXEEXT@"
+    ruby_interpreter = "$(topdir)/miniruby" + CONFIG['EXEEXT']
     if /nmake/i =~ $make
-      ruby_interpreter = '$(topdir:/=\)\miniruby@EXEEXT@'
+      ruby_interpreter = '$(topdir:/=\)\miniruby' + CONFIG['EXEEXT']
     end
@@ -511,3 +196,3 @@ target_prefix = #{target_prefix}
   if defined? CROSS_COMPILING
-    ruby_interpreter = "@MINIRUBY@"
+    ruby_interpreter = CONFIG['MINIRUBY']
   end
@@ -516,3 +201,3 @@ target_prefix = #{target_prefix}
 TARGET = #{target}
-DLLIB = $(TARGET).#{$static ? $LIBEXT : "@DLEXT@"}
+DLLIB = $(TARGET).#{$static ? $LIBEXT : CONFIG['DLEXT']}
 
@@ -521,3 +206,3 @@ RM = $(RUBY) -rftools -e "File::rm_f(*AR
 
-EXEEXT = @EXEEXT@
+EXEEXT = CONFIG['EXEEXT']
 
@@ -576,9 +261,9 @@ EOS
     mfile.print "
-{$(srcdir)}.cc{}.@OBJEXT@:
+{$(srcdir)}.cc{}.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-{$(srcdir)}.cpp{}.@OBJEXT@:
+{$(srcdir)}.cpp{}.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-{$(srcdir)}.cxx{}.@OBJEXT@:
+{$(srcdir)}.cxx{}.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-{$(srcdir)}.c{}.@OBJEXT@:
+{$(srcdir)}.c{}.#{CONFIG['OBJEXT']}:
 	$(CC) $(CFLAGS) $(CPPFLAGS) -c #{copt}#{src}
@@ -587,11 +272,11 @@ EOS
     mfile.puts "
-.cc.@OBJEXT@:
+.cc.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-.cpp.@OBJEXT@:
+.cpp.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-.cxx.@OBJEXT@:
+.cxx.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-.C.@OBJEXT@:
+.C.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-.c.@OBJEXT@:
+.c.#{CONFIG['OBJEXT']}:
 	$(CC) $(CFLAGS) $(CPPFLAGS) -c #{copt}#{src}
@@ -600,17 +285,17 @@ EOS
     mfile.print "
-{$(srcdir)}.c{}.@OBJEXT@:
+{$(srcdir)}.c{}.#{CONFIG['OBJEXT']}:
 	$(CC) -I. -I$(<D) $(CFLAGS) $(CPPFLAGS) -c #{copt}#{src}
-.c.@OBJEXT@:
+.c.#{CONFIG['OBJEXT']}:
 	$(CC) $(CFLAGS) $(CPPFLAGS) -c #{copt}#{src}
-{$(srcdir)}.cc{}.@OBJEXT@:
+{$(srcdir)}.cc{}.#{CONFIG['OBJEXT']}:
 	$(CXX) -I. -I$(<D) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-.cc.@OBJEXT@:
+.cc.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-{$(srcdir)}.cpp{}.@OBJEXT@:
+{$(srcdir)}.cpp{}.#{CONFIG['OBJEXT']}:
 	$(CXX) -I. -I$(<D) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-.cpp.@OBJEXT@:
+.cpp.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-{$(srcdir)}.cxx{}.@OBJEXT@:
+{$(srcdir)}.cxx{}.#{CONFIG['OBJEXT']}:
 	$(CXX) -I. -I$(<D) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
-.cxx.@OBJEXT@:
+.cxx.#{CONFIG['OBJEXT']}:
 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{cxxopt}#{src}
@@ -620,6 +305,6 @@ EOS
   if $static
-    if "@AR@" =~ /^lib\b/i
+    if CONFIG['AR'] =~ /^lib\b/i
       mfile.printf "\
 $(DLLIB): $(OBJS)
-	@AR@ /OUT:$(DLLIB) $(OBJS)
+	#{CONFIG['AR']} /OUT:$(DLLIB) $(OBJS)
 "
@@ -628,7 +313,7 @@ $(DLLIB): $(OBJS)
 $(DLLIB): $(OBJS)
-	@AR@ cru $(DLLIB) $(OBJS)
-	@-@RANLIB@ $(DLLIB) 2> /dev/null || true
+	#{CONFIG['AR']} cru $(DLLIB) $(OBJS)
+	@-#{CONFIG['RANLIB']} $(DLLIB) 2> /dev/null || true
 "
     end
-  elsif "@DLEXT@" != $OBJEXT
+  elsif CONFIG['DLEXT'] != $OBJEXT
     mfile.print "$(DLLIB): $(OBJS)\n"
@@ -686,6 +371,6 @@ def extmake(target)
 
-  $OBJEXT = "@OBJEXT@"
+  $OBJEXT = CONFIG['OBJEXT']
   $LIBEXT = "a"
   $objs = nil
-  $libs = "@DLDLIBS@"
+  $libs = CONFIG['DLDLIBS'].dup
   $local_flags = ""
@@ -699,3 +384,3 @@ def extmake(target)
   $CFLAGS = ""
-  $CPPFLAGS = "@CPPFLAGS@"
+  $CPPFLAGS = CONFIG['CPPFLAGS']
   $LDFLAGS = ""
@@ -767,3 +452,3 @@ $make ||= with_config("make-prog", "make
 $static_ext = {}
-for setup in ["@setup@", "#{$top_srcdir}/ext/@setup@"]
+for setup in [CONFIG['setup'], File::join($top_srcdir, "ext", CONFIG['setup'])]
   if File.file? setup
@@ -814,4 +499,4 @@ $extinit = "" unless $extinit
 
-ruby = "@RUBY_INSTALL_NAME@@EXEEXT@"
-miniruby = "miniruby@EXEEXT@"
+ruby = CONFIG["RUBY_INSTALL_NAME"] + CONFIG["EXEEXT"]
+miniruby = "miniruby" + CONFIG["EXEEXT"]
 
@@ -842,3 +527,3 @@ if $extlist.size > 0
   if older("extinit.#{$OBJEXT}", "extinit.c")
-    cmd = "@CC@ " + CFLAGS + " -c extinit.c"
+    cmd = CONFIG["CC"] + " " + CFLAGS + " -c extinit.c"
     print cmd, "\n"
Index: lib/mkmf.rb
===================================================================
RCS file: /src/ruby/lib/mkmf.rb,v
retrieving revision 1.89
diff -u -1 -p -r1.89 mkmf.rb
--- lib/mkmf.rb	23 Aug 2002 08:18:19 -0000	1.89
+++ lib/mkmf.rb	2 Sep 2002 16:44:30 -0000
@@ -14,3 +14,7 @@ unless defined? $configure_args
   $configure_args = {}
-  for arg in Shellwords.shellwords(CONFIG["configure_args"])
+  args = CONFIG["configure_args"]
+  if /mswin32|bccwin32|mingw/ =~ RUBY_PLATFORM and ENV["CONFIGURE_ARGS"]
+    args << " " << ENV["CONFIGURE_ARGS"]
+  end
+  for arg in Shellwords::shellwords(args)
     arg, val = arg.split('=', 2)
@@ -83,4 +87,4 @@ else
 end
-LINK = "#{CONFIG['CC']} #{OUTFLAG}conftest -I#{$hdrdir} #{CFLAGS} %s %s #{CONFIG['LDFLAGS']} %s conftest.c %s %s #{CONFIG['LIBS']}"
-CPP = "#{CONFIG['CPP']} -E %s -I#{$hdrdir} #{CFLAGS} %s %s conftest.c"
+$LINK = "#{CONFIG['CC']} #{OUTFLAG}conftest -I#{$hdrdir} #{CFLAGS} %s %s #{CONFIG['LDFLAGS']} %s conftest.c %s %s #{CONFIG['LIBS']}"
+$CPP = "#{CONFIG['CPP']} -E %s -I#{$hdrdir} #{CFLAGS} %s %s conftest.c"
 
@@ -97,2 +101,15 @@ end
 
+def older(file1, file2)
+  if !File.exist?(file1) then
+    return true
+  end
+  if !File.exist?(file2) then
+    return false
+  end
+  if File.mtime(file1) < File.mtime(file2)
+    return true
+  end
+  return false
+end
+
 $log = nil
@@ -129,3 +146,3 @@ def try_link0(src, opt="")
   begin
-    xsystem(Config.expand(format(LINK, $CFLAGS, $CPPFLAGS, $LDFLAGS, opt, $LOCAL_LIBS)))
+    xsystem(Config.expand(format($LINK, $CFLAGS, $CPPFLAGS, $LDFLAGS, opt, $LOCAL_LIBS)))
   ensure
@@ -152,3 +169,3 @@ def try_cpp(src, opt="")
   begin
-    xsystem(Config.expand(format(CPP, $CPPFLAGS, $CFLAGS, opt)))
+    xsystem(Config.expand(format($CPP, $CPPFLAGS, $CFLAGS, opt)))
   ensure
@@ -163,3 +180,3 @@ def egrep_cpp(pat, src, opt="")
   begin
-    xsystem(Config.expand(format(CPP, $CPPFLAGS, $CFLAGS, opt))+"|egrep #{pat}")
+    xsystem(Config.expand(format($CPP, $CPPFLAGS, $CFLAGS, opt))+"|egrep #{pat}")
   ensure
@@ -234,5 +251,9 @@ end
 
-def have_library(lib, func="main")
-  printf "checking for %s() in -l%s... ", func, lib
+def message(*s)
+  print(*s) unless /extmk\.rb/ =~ $0
   STDOUT.flush
+end
+
+def have_library(lib, func="main")
+  message "checking for #{func}() in -l#{lib}... "
 
@@ -242,3 +263,3 @@ def have_library(lib, func="main")
       if lib == 'm'
-	print "yes\n"
+	message "yes\n"
 	return true
@@ -266,3 +287,3 @@ SRC
     unless r
-      print "no\n"
+      message "no\n"
       return false
@@ -274,3 +295,3 @@ SRC
   $libs = libs
-  print "yes\n"
+  message "yes\n"
   return true
@@ -279,4 +300,3 @@ end
 def find_library(lib, func, *paths)
-  printf "checking for %s() in -l%s... ", func, lib
-  STDOUT.flush
+  message "checking for #{func}() in -l#{lib}... "
 
@@ -290,3 +310,3 @@ SRC
       $LIBPATH = libpath
-      print "no\n"
+      message "no\n"
       return false
@@ -296,3 +316,3 @@ SRC
   $libs = libs
-  print "yes\n"
+  message "yes\n"
   return true
@@ -301,4 +321,3 @@ end
 def have_func(func, header=nil)
-  printf "checking for %s()... ", func
-  STDOUT.flush
+  message "checking for #{func}()... "
 
@@ -330,3 +349,3 @@ SRC
   unless r
-    print "no\n"
+    message "no\n"
     return false
@@ -334,3 +353,3 @@ SRC
   $defs.push(format("-DHAVE_%s", func.upcase))
-  print "yes\n"
+  message "yes\n"
   return true
@@ -339,4 +358,3 @@ end
 def have_header(header)
-  printf "checking for %s... ", header
-  STDOUT.flush
+  message "checking for #{header}... "
 
@@ -345,3 +363,3 @@ def have_header(header)
 SRC
-    print "no\n"
+    message "no\n"
     return false
@@ -349,3 +367,3 @@ SRC
   $defs.push(format("-DHAVE_%s", header.tr("a-z./\055", "A-Z___")))
-  print "yes\n"
+  message "yes\n"
   return true
@@ -354,4 +372,3 @@ end
 def find_executable(bin, path = nil)
-  printf "checking for %s... ", bin
-  STDOUT.flush
+  message "checking for #{bin}... "
 
@@ -367,3 +384,3 @@ def find_executable(bin, path = nil)
     if FileTest.executable?(file)
-      print "yes\n"
+      message "yes\n"
       return file
@@ -373,3 +390,3 @@ def find_executable(bin, path = nil)
   end
-  print "no\n"
+  message "no\n"
   return nil
@@ -399,11 +416,10 @@ end
 def create_header()
-  print "creating extconf.h\n"
-  STDOUT.flush
+  message "creating extconf.h\n"
   if $defs.length > 0
-    hfile = open("extconf.h", "w")
-    for line in $defs
-      line =~ /^-D(.*)/
-      hfile.printf "#define %s 1\n", $1
+    open("extconf.h", "w") do |hfile|
+      for line in $defs
+	line =~ /^-D(.*)/
+	hfile.printf "#define %s 1\n", $1
+      end
     end
-    hfile.close
   end
@@ -443,5 +459,4 @@ def create_makefile(target, srcprefix = 
   save_libpath = $LIBPATH.dup
-  print "creating Makefile\n"
+  message "creating Makefile\n"
   rm_f "conftest*"
-  STDOUT.flush
   if target.include?('/')
